[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Math Camp 2025",
    "section": "",
    "text": "Welcome to the Math Camp 2025, organised by the Department of Government, Georgetown University.",
    "crumbs": [
      "Instructors"
    ]
  },
  {
    "objectID": "index.html#instructors",
    "href": "index.html#instructors",
    "title": "Math Camp 2025",
    "section": "Instructors",
    "text": "Instructors\nMohammad Hashem Krayem\n\nPh.D. Student (4th Year), International Relations\nmhk62@georgetown.edu\n\nParushya\n\nPh.D. Student (4th Year), Comparative Government\npp714@georgetown.edu",
    "crumbs": [
      "Instructors"
    ]
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "Math Camp 2025",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nThanks to Henry Watson and Ankushi Mitra for sharing the teaching material from previous editions of Maths Camp.",
    "crumbs": [
      "Instructors"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Math Camp is an intensive week-long course designed to refresh mathematical concepts that Ph.D. students will use in their quantitative research methods classes. This course will reintroduce students to basic topics in probability, linear algebra, and calculus through lectures, problem sets, and home work assignments. Students will also be exposed to the statistical software package R through a series of daily labs.\nYou can find the course syllabus and material from classes here.\nClasses would take place between 9 - 4 pm in ICC 450.\n\n\n\n\n\nSchedule for the Week",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "day1.html",
    "href": "day1.html",
    "title": "Day 1 - Getting Started",
    "section": "",
    "text": "Math Session\nNotation, Functions, and Limits\nLinks",
    "crumbs": [
      "Day 1 - Getting Started"
    ]
  },
  {
    "objectID": "day1.html#math-session",
    "href": "day1.html#math-session",
    "title": "Day 1 - Getting Started",
    "section": "",
    "text": "Measurement and notation\nReview Basic Algebra\nFunctions\nLimits and Series\n\n\n\nLecture slides here\nProblem set here",
    "crumbs": [
      "Day 1 - Getting Started"
    ]
  },
  {
    "objectID": "day1.html#software-session",
    "href": "day1.html#software-session",
    "title": "Day 1 - Getting Started",
    "section": "Software Session",
    "text": "Software Session\nWe will be getting started with the following installations today:\n\nR - Statistical Programming Language\nRStudio - Interactive Development Environment for R\nStata - Statistical Software Package (the “other” one)\nZotero - Reference Management Tool\nGitHub - Storing code online with version control\n\n\nR and R Studio\nUse the link here to install RStudio on your systems.\n\n\nStata\nStata is a paid software. Georgetown provides download option through the university webstore here.\n\n\nZotero\nZotero is a reference management tool. It allows you to maintain a structured bibliography. Its integration with various web browsers and software like MS Word and R, makes it a fantastic tool for keeping track of readings as well as citing them.\n\n\n\n\n\nZotero Folder\n\n\n\n\n\nMake Zotero Account.\nAdd a connector to the browser (For eg, zotero connector for google chrome).\nDownload Zotero Desktop App here.\nConnect Zotero to R Studio. (We will do this step on Day 5, using the link here).\n\n\n\nGitHub\nMake your account here",
    "crumbs": [
      "Day 1 - Getting Started"
    ]
  },
  {
    "objectID": "day2.html",
    "href": "day2.html",
    "title": "Day 2 - Basics",
    "section": "",
    "text": "Math Session\nLinear Algebra\nLinks",
    "crumbs": [
      "Day 2 - Basics"
    ]
  },
  {
    "objectID": "day2.html#why-programming-or-coding",
    "href": "day2.html#why-programming-or-coding",
    "title": "Day 2 - Basics",
    "section": "Why Programming or Coding?",
    "text": "Why Programming or Coding?\nThere are a lot of fancy answers to it. But the key idea is that you want to be lazy about repetitive tasks (MBAs call it being “productive”).\nMany tasks - data cleaning, wrangling, visualization, and statistical analysis - require you to do them many times. Moreover, you would want to be able to reproduce and replicate your thinking about all of the tasks mentioned above on many different datasets and sometimes even on the same dataset after some time.\nCoding is about formalizing your thinking about how you treat the data and automating the formalization task to be done repetitively. It improves efficiency, enhances reproducibility, and boosts creativity when it comes to finding new patterns in your data.\nGuidelines for data and statistical analyses:1\n\nAccuracy: Write a code that reduces the chances of making an error and lets you catch one if it occurs.\nEfficiency: If you are doing it twice, see the pattern of your decision-making and formalize it in your code. Difference between Excel and coding\nReplicate-and-Reproduce: Ability to repeat the computational process which reflects your thinking and decisions that you took along the way. Improves transparency and forces one to be deliberate and responsible about choices during analyses.\n\nHuman Interpretability: Writing code is not just about analyzing but allowing yourself and then others to be able to understand your analytic choices.\n\nPublic Good: Research is a public good. And the code allows your research to be truly accessible. This means you write a code that anyone else who understands the language can read, reuse, and recreate without you being present. We essentially ensure that by writing a readable and ideally publicly accessible code.",
    "crumbs": [
      "Day 2 - Basics"
    ]
  },
  {
    "objectID": "day2.html#r-and-rstudio",
    "href": "day2.html#r-and-rstudio",
    "title": "Day 2 - Basics",
    "section": "R and RStudio",
    "text": "R and RStudio\nR is a free open-source statistical programming language. We generally use R through RStudio which is an integrated development environment (IDE). Essentially, it is the graphic user interface that allows us to use R efficiently. It has point-and-click functionality also (which we would not use a lot).\n\n\n\n\n\nRStudio Screen\n\n\n\n\nR Scripts: This is where put your code in a script. The script is saved with a .R extension. An R script is a text file that you can read on text editors too. We use RStudio to run the code in a way that the computer understands.\nConsole: Output from your code appears here. You can also write the code directly here. But it does not get saved. Also, by default, it shows only a limited number of previous steps (commands + outputs). Not a good practice to code here.\nEnvironment: All the objects, datasets, lists, etc that you have created/loaded in the environment appear here. Alongside, you also see the custom functions that you might create.\nFile Browser/Help/Plot: Internal file navigator and help documentation for packages and functions appear here. Further, when you plot anything, that also gets shown here.\nComments: R interprets every line in the script as a separate command. And it does for each line unless preceded by a #. Comments signal to R that what follows the # is to be ignored.We use comments to write explanatory notes about the code. A comment should explain the purpose of a command or code and not just be a description of what it does.",
    "crumbs": [
      "Day 2 - Basics"
    ]
  },
  {
    "objectID": "day2.html#basics",
    "href": "day2.html#basics",
    "title": "Day 2 - Basics",
    "section": "Basics",
    "text": "Basics\nR uses &lt;- as the assignment operator. To the left of it is an object (sort of like a box that stores values which are to the right of the operator).\nSyntax: object &lt;- value/data\n\nExercise 1Code 1\n\n\n\nCreate a new .R script. Name it and save it on your system.\n\nR does all the functions of a calculator. Write some code in the script that\n\n\nAdds two numbers\nMultiplies three numbers\nPrints your name\n\n\nRun each command separately by using cmd + Enter / ctrl + Enter.\nAssign the outputs from 2 to different objects.\nPrint the objects with some description using paste().\nRun the whole file.\n\n\n\nYou can start a new script through many different ways:\n\nctrl + shift + n\nClick on the tiny white page button with a green+sign on the upper left corner of the screen\nClick on File &gt; New file&gt; R script\n\nSaving a script:\n\nCtrl + S\nEnter the name of the script, and add .R as a suffix. For example: xyzbasic.R\n\n\n#2. \n2 + 7\n\n56 * 9 * 33\n\nprint(\"Parushya\")\n\nThe output is displayed in the console.\n\n#4\n\n\nsum_2 &lt;- 2 + 7\n\nprod_3 &lt;- 56 * 9 * 33\n\nname &lt;- \"parushya\"\n\n\n#5\n\npaste(\"Sum of 2 and 7 is\", sum_2)\n\npaste(\"Product of 56, 9 and 33 is\", prod_3)\n\npaste(\"This very fancy R code was written by\", name)",
    "crumbs": [
      "Day 2 - Basics"
    ]
  },
  {
    "objectID": "day2.html#objects-datatypes-and-data-structures",
    "href": "day2.html#objects-datatypes-and-data-structures",
    "title": "Day 2 - Basics",
    "section": "Objects, Datatypes, and Data Structures",
    "text": "Objects, Datatypes, and Data Structures\n\n\n\n\n\n\nExercise 2\n\n\n\nRun the following code in the same script that we created\n\nclass(sum_2)\n\nclass(prod_3)\n\nclass(name)\n\n\n\nEverything in R is called an “object”\n“Objects” contain “data”.\nThe three variables we created - sum_2, prod_3, and name - were all basic objects.\nR has 5 basic or “atomic” classes/datatypes of objects.\n\nCharacter - (abc)\nNumeric - (real numbers) - (1,7.5,etc)\nInteger - (1,2,0,-896)\nLogical - (True/False)\nComplex - (1, 0+i)\n\nData structures are bigger containers that hold many objects.\nTwo basic or “atomic” data structures in R are:\n\nVectors: can hold objects of same datatype\nLists: can hold objects with different datatypes\n\n\n\n\n\n\n\nUnderstanding Vectors\n\n\n\nWe can create a vector using the “c()” command.\n\na_num &lt;- c(0,0.7,9,2,3,4,-1)            # numeric or double\n\nb_logical &lt;- c(TRUE,FALSE,TRUE,TRUE,TRUE) # logical\n\nc_logical &lt;- c(T,F,T,T,T) # also logical - Never use T and F as it leads to errors in analysis\n\nd_char &lt;- c(\"Sheila\", \"Nila\", \"Camilla\")  # character\n\ne_int &lt;- 1:20 # integer\n\nf_int &lt;- c(1,2,3,4,5)  # integer\n\ng_int &lt;- c(1+0i,2+4i) # complex numbers\n\nBasic vectors are uni-dimensional. We can make a two dimensional vector, which is called matrix.\n\nWorking with matrices\n\n# Creating Blank Matrix\nm_1 &lt;- matrix(nrow=3,ncol=4)\nm_1      \n\n     [,1] [,2] [,3] [,4]\n[1,]   NA   NA   NA   NA\n[2,]   NA   NA   NA   NA\n[3,]   NA   NA   NA   NA\n\ndim(m_1)\n\n[1] 3 4\n\n\n\n?matrix # Help documentation\n\n# Creating Matrix with elements\n\nm_2 &lt;- matrix(1:10, nrow = 3, ncol = 4) # Why the warning?\nm_2\n\n# With correct number of elements\nm_3 &lt;- matrix(1:18, nrow=9, ncol=2))\nm3\n\nLogic of matrices\nMatrices are constructed column-wise. So, it fills the upper left corner, and then runs down along.\nIndexing in matrices\n\n# Rows & Columns ----    \n# Very simply the syntax is:  (2,3) = (Rows, Columns)\n# m[1,] - 1st row\n# m[2,] - 2nd row\n# m[,3] - 3rd column  \n# m[,5] - 5th column\n# m[,7] - 7th column\n\n\n# What if you already have a vector?\n# Example: You have received a list of students who have skipped school today.\n# You know which section they are in, and want to create a matrix.\nk &lt;- c(\"Hashem\", \"John\", \"Cecillia\", \"Minha\", \"Parushya\", \"Keeheon\")\nk\n\n[1] \"Hashem\"   \"John\"     \"Cecillia\" \"Minha\"    \"Parushya\" \"Keeheon\" \n\ndim(k) &lt;- c(3,2)\nk\n\n     [,1]       [,2]      \n[1,] \"Hashem\"   \"Minha\"   \n[2,] \"John\"     \"Parushya\"\n[3,] \"Cecillia\" \"Keeheon\" \n\ncolnames(k) &lt;- c(\"Section A\", \"Section B\")\n\nk\n\n     Section A  Section B \n[1,] \"Hashem\"   \"Minha\"   \n[2,] \"John\"     \"Parushya\"\n[3,] \"Cecillia\" \"Keeheon\" \n\nrownames(k) &lt;- c(\"Student 1\", \"Student 2\", \"Student 3\")\n\nk\n\n          Section A  Section B \nStudent 1 \"Hashem\"   \"Minha\"   \nStudent 2 \"John\"     \"Parushya\"\nStudent 3 \"Cecillia\" \"Keeheon\" \n\n\nBinding vectors together to make a matrix\n\n# Binding\nx &lt;- 1:3\ny &lt;- 4:6\nz &lt;- c(\"Camilla\",\"Nila\",\"Duflo\",\"Akbar\")\n\nx\n\n[1] 1 2 3\n\ny\n\n[1] 4 5 6\n\nz\n\n[1] \"Camilla\" \"Nila\"    \"Duflo\"   \"Akbar\"  \n\nrbind(x,y) # Stitches vector row wise, or appends it horizontally\n\n  [,1] [,2] [,3]\nx    1    2    3\ny    4    5    6\n\ncbind(x,y) # Stitches vector column wise, or vertically\n\n     x y\n[1,] 1 4\n[2,] 2 5\n[3,] 3 6\n\n\n\n\n\n\nLists\nIf we want to create something that stores objects of different classes together, we use another data structure called list.\nA list can contain two or more classes of objects with different lengths.\n\n\n\n\n\n\nCreating lists\n\nlist_1 &lt;- list(\"a\" = 2.5, \"b\" = TRUE, \"c\" = 1:3)\n\nlist_1\n\n$a\n[1] 2.5\n\n$b\n[1] TRUE\n\n$c\n[1] 1 2 3\n\n\nWe created a list with objects of three different types - numeric, logical, and integer vector.\n\n# Structure of the list\nstr(list_1)\n\nList of 3\n $ a: num 2.5\n $ b: logi TRUE\n $ c: int [1:3] 1 2 3\n\n\nWe can also create a list with existing vectors.\n\n# A new vector\nname_vec &lt;- c(\"Camilla\",\"Nila\",\"Duflo\",\"Akbar\")\n\n# And then lets use the vectors we already have in the environment\nlist_2 &lt;- list(name_vec, c_logical, d_char, f_int, e_int, a_num)\nlist_2\n\n[[1]]\n[1] \"Camilla\" \"Nila\"    \"Duflo\"   \"Akbar\"  \n\n[[2]]\n[1]  TRUE FALSE  TRUE  TRUE  TRUE\n\n[[3]]\n[1] \"Sheila\"  \"Nila\"    \"Camilla\"\n\n[[4]]\n[1] 1 2 3 4 5\n\n[[5]]\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\n[[6]]\n[1]  0.0  0.7  9.0  2.0  3.0  4.0 -1.0\n\n\n\n# let's check the classes of objects\nclass(list_2[[2]])\nclass(list_2[[3]])\n\n# And their lengths\nlength(list_2[[2]])\nlength(list_2[[3]])\n\nAccessing elements in a List\nBy indices in a list\n\n# So lists are printed differently, and elements of a list will have [[]] i.e 2 brackets.    \n\nlist_2\n\n[[1]]\n[1] \"Camilla\" \"Nila\"    \"Duflo\"   \"Akbar\"  \n\n[[2]]\n[1]  TRUE FALSE  TRUE  TRUE  TRUE\n\n[[3]]\n[1] \"Sheila\"  \"Nila\"    \"Camilla\"\n\n[[4]]\n[1] 1 2 3 4 5\n\n[[5]]\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\n[[6]]\n[1]  0.0  0.7  9.0  2.0  3.0  4.0 -1.0\n\n\n\n## Accessing elements | run each of the follwing lines and see the output\nlist_2[[2]] \nlist_2[2]\nlist_2[1][2]\nlist_2[[1]][1]\nlist_2[[1]][[1]]\nlist_2[[1]][2]\n\nBy using names or tags\n\nlist_3 &lt;- list(name = \"John\", age = 19, speaks = c(\"English\", \"French\"))\n\n# access elements by name\nlist_3$name\nlist_3$age\nlist_3$speaks\n\n# access elements by integer index\nlist_3[c(1, 2)]\nlist_3[-2]\n\n# access elements by logical index\nlist_3[c(TRUE, FALSE, FALSE)]\n\n# access elements by character index\nlist_3[c(\"age\", \"speaks\")]\n\nModifying lists\nAdding components in a list\n\nlist_4 &lt;- list(name = \"Clair\", age = 19, speaks = c(\"English\", \"French\"))\n\n# assign a new element to the list using double brackets [[]]\nlist_4[[\"married\"]] &lt;- FALSE\n\n# print the updated list\nlist_4\n\n$name\n[1] \"Clair\"\n\n$age\n[1] 19\n\n$speaks\n[1] \"English\" \"French\" \n\n$married\n[1] FALSE\n\n\nDeleting components in a list\n\nlist_5 &lt;- list(name = \"Clair\", age = 19, speaks = c(\"English\", \"French\"))\n\n# remove an element from the list using double brackets [[]]\nlist_5[[\"age\"]] &lt;- NULL\n\n# print the structure of the updated list\nstr(list_5)\n\nList of 2\n $ name  : chr \"Clair\"\n $ speaks: chr [1:2] \"English\" \"French\"\n\n# remove an element from the list using $ notation\nlist_5$married &lt;- NULL\n\n# print the structure of the updated list\nstr(list_5)\n\nList of 2\n $ name  : chr \"Clair\"\n $ speaks: chr [1:2] \"English\" \"French\"",
    "crumbs": [
      "Day 2 - Basics"
    ]
  },
  {
    "objectID": "day2.html#footnotes",
    "href": "day2.html#footnotes",
    "title": "Day 2 - Basics",
    "section": "",
    "text": "Inspired by the summary provided by Prof Aaron Williams’ course on Data Analysis offered at McCourt School. Strongly recommended to learn good coding using R↩︎",
    "crumbs": [
      "Day 2 - Basics"
    ]
  },
  {
    "objectID": "day3.html",
    "href": "day3.html",
    "title": "Day 3 - R for Analysis",
    "section": "",
    "text": "Math Session\nCalculus I: Derivatives\nLinks",
    "crumbs": [
      "Day 3 - R for Analysis"
    ]
  },
  {
    "objectID": "day3.html#factors",
    "href": "day3.html#factors",
    "title": "Day 3 - R for Analysis",
    "section": "Factors",
    "text": "Factors\nFactors are used for categorical data - both nominal and ordinal ones.\nFactors are treated as a separate datatype in R. Technically, factors are stored as a vector of integer values corresponding to the character type objects which they are used to represent.\n\n\n\n\n\n\nYou can define a factor by using factor() command.\n\nvec_1 &lt;- c(\"yes\", \"no\", \"yes\")\n\nfct_1 &lt;- factor(c(\"yes\", \"no\", \"yes\"))\n\n# Notice the difference in outputs\n\nvec_1\n\n[1] \"yes\" \"no\"  \"yes\"\n\nfct_1\n\n[1] yes no  yes\nLevels: no yes\n\n\n\n# Btw, table() command cn be used in R for cross-tabulations\n# with both vector and factor datatypes. \n\ntable(vec_1)\n\nvec_1\n no yes \n  1   2 \n\ntable(fct_1)\n\nfct_1\n no yes \n  1   2 \n\n\nOrdering Factors\nSometimes it is essential to specify the orders of your factor levels. Particularly during modelling and estimation with binary or categorical variables, given that the first level of factor is used in most functions, like lm(linear regression command in R), will be treated as baseline level or category.\nFor example, we have a variable measuring dose of vaccine administered (placebo, medium, high). Here specifying order becomes important as all measurements of the treatment efficacy will have to be with respect to the baseline category.\nWe use levels() within factor() command to do this.\n\nfct_2 &lt;- factor(c(\"High\", \"High\", \"Medium\", \"Medium\", \"High\", \"High\",\"Placebo\"))\nfct_2   \n\n[1] High    High    Medium  Medium  High    High    Placebo\nLevels: High Medium Placebo\n\n# (Order is often determined using alphabetical variables by default) (H-M-P)\n\n# Ordering it\nfct_2 &lt;- factor(c(\"Placebo\", \"High\", \"Medium\", \"Placebo\", \"Medium\", \n            \"Medium\", \"High\", \"High\"),\nlevels = c(\"Placebo\",\"Medium\",\"High\"))\n\nfct_2\n\n[1] Placebo High    Medium  Placebo Medium  Medium  High    High   \nLevels: Placebo Medium High",
    "crumbs": [
      "Day 3 - R for Analysis"
    ]
  },
  {
    "objectID": "day3.html#dataframes",
    "href": "day3.html#dataframes",
    "title": "Day 3 - R for Analysis",
    "section": "Dataframes",
    "text": "Dataframes\nIn R, dataframes are data structure which store data in a tabular format.\n\n\n\n\n\n\nWe create dataframes using data.frame() command.\n\ndf_1 &lt;- data.frame(\n    Foo= 15:18, \n    Bar= c(T, F, T, T), \n    Name= c(\"Penny\", \"Sheldon\", \"Rajesh\", \"Leonard\")\n)\n\nExploring the contents and structure of the dataframe\n\n# Viewing dataframe\ndf_1 # In Console\nView(df_1)  # In Viewer\n\n# structure of dataframe\nstr(df_1)\n\n# Names of columns/variables\nnames(df_1)\n\n# Dimesnions of Dataframe\nnrow(df_1)      \nncol(df_1)\ndim(df_1)\n\n# Summary of dataframe\nsummary(df_1) # See the output closely | very useful for understanding the dataset\n\nAccessing the objects inside dataframe\n\n# Access Items using [] \ndf_1[1]\n\n  Foo\n1  15\n2  16\n3  17\n4  18\n\n# Access Items using [[]]\ndf_1[['Bar']]\n\n[1]  TRUE FALSE  TRUE  TRUE\n\n# Access Items using $\ndf_1$Bar\n\n[1]  TRUE FALSE  TRUE  TRUE\n\n# Access particular data point\ndf_1$Foo[3]\n\n[1] 17\n\n# what will be the output?\ndf_1[1,3]\n\n[1] \"Penny\"\n\n\nTidyverse package has a very efficient framwork for working with dataset. Check the tidyverse book from day 2 for the same.",
    "crumbs": [
      "Day 3 - R for Analysis"
    ]
  },
  {
    "objectID": "day3.html#packages",
    "href": "day3.html#packages",
    "title": "Day 3 - R for Analysis",
    "section": "Packages",
    "text": "Packages\nPackages in R are containers for functions. A lot of packages are already installed when you install R.\n\n# Check available packages\nlibrary()\n\nYou can install packages from Comprehensive R Archive Network or CRAN which is an online storage of peer-reviewed and documented packages.\nThe command for loading a package is install.package().\n\n# installing package. Eg, tidyverse\n\ninstall.packages(\"tidyverse\") # You have ti run this once on system\n\nlibrary(tidyverse) # Once installed library(&lt;packagename&gt;) command loads all the functions associated with the package in the current session for use\n\n\n\n\n\n\n\nExercise 1\n\n\n\nLoad the following four packages/libraries, which we would be using later - janitor, here, readstata13, and tinytex.\n\ninstall.packages(\"&lt;package name&gt;\")\nlibrary(&lt;package name&gt;)",
    "crumbs": [
      "Day 3 - R for Analysis"
    ]
  },
  {
    "objectID": "day3.html#importing-and-exporting-datasets",
    "href": "day3.html#importing-and-exporting-datasets",
    "title": "Day 3 - R for Analysis",
    "section": "Importing and Exporting Datasets",
    "text": "Importing and Exporting Datasets\n\nR has a range of functions for using different types of data. But before loading datasets let’s understand the concept of working directories.\nA working directory is sort of the “office” that you operate from. They tell R where to operate from.\nWorking directories are specified using a file path i.e. the address in your computer where your script will be stored, or where your dataset is kept.\n\n# Commands:\ngetwd() # Gets the present directory or pathway where you are operating from\n     \nsetwd(\"&lt;press tab here&gt;\") # Setting new directory as working directory\n\nlist.files()  #list the files in the working directory\n\nBelow is a limited list of commands for loading/importing most commonly used dataset types.\n\nread.csv(\"FileName\") # reads CSV files / press tab inside the quotes\nread_csv(\"Pathname/filename.csv\")  \n\n# The part before :: in the following code refers to the package from where the \n#  function comes from. You will need to load those packages first.\n\nreadxl::read_excel() # read excel files\nreadxl::read_xlsx() # reads excel workbooks\nhaven::read_dta()   # reads stata dta files\n\n# example: \n    \ndataframe1 &lt;- read.csv(\"&lt;file path&gt;\")\n\n\nExercise 2Code 2\n\n\n\nDownload the folder Datasets-mathcamp from the link\nLoad datasets using the functions referred above\nExplore the contents of datasets using the functions we learned in the previous section.\nSave these datasets with a different names at a different location.\n\n\n\n\nDownload the folder Datasets-mathcamp from the link\nLoad datasets using the functions referred above.\n\nANES dataset | American National Election Study (“2016 Time Series Study,” n.d.)\n\nanes_df &lt;- read.csv(\"Datasets-mathcamp/anes_specialstudy_2020-2022_socialmedia_csv_20230705/anes_specialstudy_2020-2022_socialmedia_csv_20230705.csv\") # base R\n\nanes_df_2 &lt;- read_csv(\"Datasets-mathcamp/anes_specialstudy_2020-2022_socialmedia_csv_20230705/anes_specialstudy_2020-2022_socialmedia_csv_20230705.csv\")  # tidyverse\n\nWorld Political Cleavages and Inequality Database\n\nwid_df &lt;- readxl::read_excel(\"Datasets-mathcamp/World Inequality Database/gmp-macro-final-party.xlsx\")\n\nDatabase on Political Institutions\n\ndpi20_df &lt;- read_dta(\"Datasets-mathcamp/DPI/DPI2020_stata13.dta\") # Why error?\ndpi20_df_2 &lt;- read.dta13(\"Datasets-mathcamp/DPI/DPI2020_stata13.dta\")\n\nVDem dataset | Varieties of democracy\n\nvdem_df &lt;- readRDS(\"Datasets-mathcamp/V-Dem-CY-Full+Others-v12.rds\")\n\n# RDS and Rdata are native R file storage formats\n\n\nExplore the contents of datasets using the functions we learned in the previous section.\n\n\n#Hint: summary, str\n\n\nSave these datsets with a different name at a different location.\n\n\n# Hint\n# write.csv() and equivalents\n\n# saveRDS and save for native R data struture types\n\n\n\n\n\nThe datasets we just practiced with are very commonly used across various subfields. The documentation is also included in the folder that we just downloaded.\n\n\n\n\n“2016 Time Series Study.” n.d. ANES | American National Election Studies. https://electionstudies.org/data-center/2016-time-series-study/.",
    "crumbs": [
      "Day 3 - R for Analysis"
    ]
  },
  {
    "objectID": "day4.html",
    "href": "day4.html",
    "title": "Day 4 - \\(\\LaTeX\\) and Quarto",
    "section": "",
    "text": "Software Session",
    "crumbs": [
      "Day 4 - $\\LaTeX$ and Quarto"
    ]
  },
  {
    "objectID": "day4.html#wth-is-latex",
    "href": "day4.html#wth-is-latex",
    "title": "Day 4 - \\(\\LaTeX\\) and Quarto",
    "section": "WTH is \\(\\LaTeX\\)?",
    "text": "WTH is \\(\\LaTeX\\)?\n\\(\\LaTeX\\) (pronounced “LAY-tek” or “LAH-Tek) is a typesetting tool for preparing high-quality professional documents. It is the preferred typesetting tool used in high-end scientific documentation task. Essentially, it allows you better control over how your document look like, has enhanced capabilities to write technical specifications (Maths, stats, proofs, etc.), and produces readily editable back-end documents.\nIt is not a word-processing tool. It is a simple tool without too many priors about how the document should look like.\nIn academic world there are definite advantages to learning and being comfortable with \\(\\LaTeX\\). That would require regular use and best time to start doing that would be today (or at least next week!).\nThere are many interfaces that allow you to work with \\(\\LaTeX\\). Overleaf is a widely used online platform and Texmaker is a popular offline application.\nHowever, RStudio has in-built capability to double as a \\(\\LaTeX\\) editor. Previously RMarkdown and now Quarto are those capabilities that you can harness to achieve professional and beautifully typeset documents.\nThink of writing an equation like:\n\\[\nViolence_{i,j} = \\beta_0 + \\beta_1EthnicFractionalization_i + \\gamma_j + \\epsilon_i\n\\] In Latex, using quarto, you have to write something like the following:\n$Violence_{i,j} = \\\\beta_0 + \\\\beta_1EthnicFractionalization_i + \\\\gamma_j + \\\\epsilon_i$\nFor a single line of text we encapsulate code by $ sign.\nFor multi-line code we use $$.\nRead more about \\(\\LaTeX\\) here\nThe box folder has some detailed resources for helping with typesetting in \\(\\LaTeX\\).",
    "crumbs": [
      "Day 4 - $\\LaTeX$ and Quarto"
    ]
  },
  {
    "objectID": "day4.html#quarto",
    "href": "day4.html#quarto",
    "title": "Day 4 - \\(\\LaTeX\\) and Quarto",
    "section": "Quarto",
    "text": "Quarto\nQuarto is a literate statistical programming tool. Literate statistical programming, as Donald Knuth (1984) defines, is a way to write programs that focuses on explaining to human readers what we want the computers to do, rather than just instructing the computers to do so.\nQuarto can include code from not just R, but also Python, Julia, Stata and many other languages/tools.\nQuarto allows you to truly include the good coding guidelines that we discussed on day 1. It provides you with capability to write code using R, write text that is part of any professional communication, and include mathematical symbols and equations in a well typeset format. Essentially, it allows you to work on a manuscript with data analysis at one place.\nHere is some cool stuff that you can do with quarto.\n\n\n\n\n\n\nNote\n\n\n\nRun the following in console:\n```{r}\ninstall.packages(\"tinytex\")\n\ntinytex::install_tinytex()`. \n\n```\nThis installs the latex distribution that Rmarkdown and Quarto readily work with for generating PDF output.\nMore details and troubleshooting here and here.\n\n\n\n\n\n\n\n\nExercise 1\n\nOpen a new quarto document by File &gt; New File &gt; Quarto Document.\nUse Render button on top on scripts panel to save and get a .pdf output.",
    "crumbs": [
      "Day 4 - $\\LaTeX$ and Quarto"
    ]
  },
  {
    "objectID": "day4.html#basics",
    "href": "day4.html#basics",
    "title": "Day 4 - \\(\\LaTeX\\) and Quarto",
    "section": "Basics",
    "text": "Basics\nA Quarto document is saved as a .qmd file. You can edit this file in two ways: Programmatically by being in source button and visually by choosing the Visual button, both button on top left corner of the .qmd window. More details about working with Quarto can be found on the quarto website here.\nThere are three building blocks in a .qmd file:\n\nYAML\nShort for Yet-Another-Markup-Languge\nThis is the part we see sandwiched between two --- at the strat of .qmd file. Here we define different global settings for the particular document.\nCurrently, we see\n---\ntitle: \"Untitled\"\nformat: html\n---\nWe can add many more options here to modify the details to appear at the start of the document. Here’s an example from quarto reference site\n\n\n\n\n\n\n  ---\n  title: \"Toward a Unified Theory of High-Energy Metaphysics: Silly String Theory\"\n  date: 2008-02-29\n  author:\n    - name: Josiah Carberry\n      id: jc\n      orcid: 0000-0002-1825-0097\n      email: josiah@psychoceramics.org\n      affiliation: \n        - name: Brown University\n          city: Providence\n          state: RI\n          url: www.brown.edu\n  abstract: &gt; \n    The characteristic theme of the works of Stone is \n    the bridge between culture and society. ...\n  keywords:\n    - Metaphysics\n    - String Theory\n  license: \"CC BY\"\n  copyright: \n    holder: Josiah Carberry\n    year: 2008\n  citation: \n    container-title: Journal of Psychoceramics\n    volume: 1\n    issue: 1\n    doi: 10.5555/12345678\n  funding: \"The author received no specific funding for this work.\"\n  ---\n  \n\n\n\nOr, global settings for different formats of outputs like\n\n\n\n\n\n\n---\ntitle: \"My Document\"\nformat: \n  html:\n    fig-width: 8\n    fig-height: 6\n  pdf:\n    fig-width: 7\n    fig-height: 5\n---\n\n\n\n\n\nCode Chunks\nOne of the fascinating features about quarto is that you can write code to anlayse data and regular text in the same document.\nYou can start a new R code chunk by pressing cmd + option + I or ctrl + alt + I.\nYou can also do this with the Insert button icon in the editor toolbar or by manually typing the chunk delimiters ```{r} and ```.\nTry to use the keyboard shortcut more often as it will save you a ton of time later.\nR code chunks are surrounded by ```{r} and ```.\nYou can run each code chunk by clicking the Run icon (it looks like a play button at the top of the chunk), or by pressing Cmd/Ctrl + Shift + Enter.\n#| eval: true # Do evaluate this chunk\n#| echo: true # Do show this chunk in the final rendered document\n#| output: true # Do show the output / results of this chunk in the rendered document\n\nprint(\"Dont run this code\")\nRStudio executes the code and displays the results below the code.\nIf you don’t like seeing your plots and output in your document and would rather make use of RStudio’s Console and Plot panes, you can click on the gear icon next to “Render” and switch to “Chunk Output in Console”.\nA chunk should be relatively self-contained, and focused around a single task.\n\n\n\n\n\n\nExercise\n\nAdd a code chunk at the bottom of the .qmd file you created.\nAdd some simple mathematical operations from the exercises on Day 2 in the code chunk.\nRun the code chunk separately, and then the whole file by pressing Render button from the top.\n\n\n\n\nCode chunk options are included in a special comment at the top of the block (lines at the top prefaced with #| are considered options). More on code chunk options here\nOptions available for customizing output include:\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\neval\nEvaluate the code chunk (if false, just echos the code into the output).\n\n\necho\nInclude the source code in output\n\n\noutput\nInclude the results of executing the code in the output (true, false, or asis to indicate that the output is raw markdown and should not have any of Quarto’s standard enclosing markdown).\n\n\nwarning\nInclude warnings in the output.\n\n\nerror\nInclude errors in the output (note that this implies that errors executing code will not halt processing of the document).\n\n\ninclude\nCatch all for preventing any output (code or results) from being included (e.g. include: false suppresses all output from the code block).\n\n\n\nYou can also add these options as global options in the YAML by writing them under execute option like:\n---\nexecute: \n  echo: true\n  inlcude: false\n---\nThe following table summarizes which types of output each option suppresses:1\n\n\n\n\n\n\n\n\n\n\n\n\nOption\nRun code\nShow code\nOutput\nPlots\nMessages\nWarnings\n\n\n\n\neval: false\nX\n\nX\nX\nX\nX\n\n\ninclude: false\n\nX\nX\nX\nX\nX\n\n\necho: false\n\nX\n\n\n\n\n\n\nresults: hide\n\n\nX\n\n\n\n\n\nfig-show: hide\n\n\n\nX\n\n\n\n\nmessage: false\n\n\n\n\nX\n\n\n\nwarning: false\n\n\n\n\n\nX\n\n\n\n\nInline code\nWe can also embed R code into a Quarto document: directly into the text, with: ```{r} &lt;code&gt; ```.\nFor example: ```{r} (2+2)```.\n\n\n\nMarkdown Text\nMarkdown text is like any other text just with some special considerations.\nYou can see the help section from R to see some of the basic formatting tips.\n\n\n\nR Markdown Help\n\n\n\n\n\n\n\n\nThese are some of the regularly used formatting options in RMarkdown/Quarto Titles and subtitles ————————————————————\n# Title 1\n\n## Title 2\n\n### Title 3\n\n\nText formatting \n------------------------------------------------------------\n\n*italic*  \n\n**bold**   \n\n`code`\n\nLists\n------------------------------------------------------------\n\n* Bulleted list item 1\n* Item 2\n  * Item 2a\n  * Item 2b\n\n1. Item 1\n2. Item 2\n\nLinks and images\n------------------------------------------------------------",
    "crumbs": [
      "Day 4 - $\\LaTeX$ and Quarto"
    ]
  },
  {
    "objectID": "day4.html#latex",
    "href": "day4.html#latex",
    "title": "Day 4 - \\(\\LaTeX\\) and Quarto",
    "section": "\\(\\LaTeX\\)",
    "text": "\\(\\LaTeX\\)\nFollow these instructions to install library(tinytex).\nIntro to \\(\\LaTeX\\) in Markdown",
    "crumbs": [
      "Day 4 - $\\LaTeX$ and Quarto"
    ]
  },
  {
    "objectID": "day4.html#footnotes",
    "href": "day4.html#footnotes",
    "title": "Day 4 - \\(\\LaTeX\\) and Quarto",
    "section": "",
    "text": "This section is copied from R4DS book↩︎",
    "crumbs": [
      "Day 4 - $\\LaTeX$ and Quarto"
    ]
  },
  {
    "objectID": "day5.html",
    "href": "day5.html",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "",
    "text": "Setup\nBy the end of today, you will be able to:\nStart by creating a new qmd file, like we did yesterday. Write/paste all the code from today in the same file so that we can render at the end.\n# Install if needed (run once):\n# install.packages(c(\"tidyverse\"))\n\nlibrary(tidyverse)   # loads ggplot2, dplyr, tidyr, readr, tibble, stringr, forcats, purrr",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#setup",
    "href": "day5.html#setup",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "",
    "text": "```{r}\n# Quick peek at the data we'll use\nhead(mpg)\nstr(mpg)\n```",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#comparison-operators-what-they-do",
    "href": "day5.html#comparison-operators-what-they-do",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Comparison operators (what they do)",
    "text": "Comparison operators (what they do)\n\n==, !=: test equality / inequality (return TRUE/FALSE).\n&gt;, &gt;=, &lt;, &lt;=: numeric comparisons.\n&&, ||: element-wise logic on single TRUE/FALSE values (short-circuit). Use &/| for vectorized logic.\n!: logical negation.\n\n```{r}\nx &lt;- 10\ny &lt;- 20\n\nx == y     # FALSE\nx != y     # TRUE\nx &gt; 0      # TRUE\nx &gt;= 10    # TRUE\nx &lt; y      # TRUE\nx &lt;= y     # TRUE\n```",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#if",
    "href": "day5.html#if",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "if",
    "text": "if\n\nRuns a code block only if the condition is TRUE.\n\n```{r}\nif (x &gt; 0) {\n  print(\"x is a positive number\")\n}\n```",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#if-...-else",
    "href": "day5.html#if-...-else",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "if ... else",
    "text": "if ... else\n\nChooses one of two paths.\n\n```{r}\nif (x &gt; y) {\n  print(\"x is greater than y\")\n} else {\n  print(\"y is greater than or equal to x\")\n}\n```",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#laddered-else-if",
    "href": "day5.html#laddered-else-if",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Laddered else if",
    "text": "Laddered else if\n\nChains multiple mutually exclusive tests.\n\n```{r}\nx &lt;- y\nif (x &gt; y) {\n  print(\"x is greater than y\")\n} else if (y &gt; x) {\n  print(\"y is greater than x\")\n} else {\n  print(\"x and y are equal\")\n}\n```",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#nested-if",
    "href": "day5.html#nested-if",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Nested if",
    "text": "Nested if\n\nScope one decision inside another.\n\n```{r}\nx &lt;- 20; y &lt;- 10; z &lt;- -30\nif (x &gt; y) {\n  print(\"x is greater than y\")\n  if (x &gt; z) {\n    print(\"x is greater than y and z\")\n  }\n}\n```",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#multiple-conditions-and-the-difference-between-vs",
    "href": "day5.html#multiple-conditions-and-the-difference-between-vs",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Multiple conditions and the difference between &/| vs &&/||",
    "text": "Multiple conditions and the difference between &/| vs &&/||\n```{r}\n# For single TRUE/FALSE (first element only): &&, ||\nif (x &gt; y && x &gt; z) {\n  print(\"x is greater than both y and z\")\n}\n\n# Vectorized comparisons across all elements: &, |\nc(1,2,3) &gt; 2 & c(10,20,30) &gt; 15\n```\n\n\n\n\n\n\nExercise\n\n\n\nWrite an if...else if...else ladder that prints \"small\", \"medium\", or \"large\" depending on the value of n relative to 10 and 100.",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#central-tendency",
    "href": "day5.html#central-tendency",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Central tendency",
    "text": "Central tendency\n\nmean(x): arithmetic average (sensitive to outliers).\nmedian(x): middle value (robust to outliers).\n\n```{r}\nmean(mpg$displ)\nmedian(mpg$displ)\n\n# Note: base R's mode() returns the storage mode, not the statistical mode.\nmode(mpg$displ)\n```",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#spread-quantiles",
    "href": "day5.html#spread-quantiles",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Spread & quantiles",
    "text": "Spread & quantiles\n\nvar(x), sd(x): variance and SD.\nquantile(x, p): p-th quantile (e.g., 0.25 = Q1).\nIQR(x): Q3 - Q1.\nrange(x), min(x), max(x).\n\n```{r}\nvar(mpg$cty)\nsd(mpg$cty)\n\nquantile(mpg$cty, c(0.25, 0.75))\nIQR(mpg$cty)\n\nmin(mpg$cty); max(mpg$cty)\nrange(mpg$cty)\n```",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#categorical-summaries",
    "href": "day5.html#categorical-summaries",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Categorical summaries",
    "text": "Categorical summaries\n\ntable(x): counts by category.\nunique(x): distinct values.\n\n```{r}\ntable(mpg$drv)\nunique(mpg$cyl)\n```",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#group-wise-means-manual-vs.-aggregate",
    "href": "day5.html#group-wise-means-manual-vs.-aggregate",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Group-wise means (manual vs. aggregate())",
    "text": "Group-wise means (manual vs. aggregate())\n\naggregate(y ~ g, FUN, data): summary of y by groups g.\nsubset = lets you compute summaries on filtered rows.\n\n```{r}\n# Manual subsetting (repetitive)\nmean(mpg$cty[mpg$cyl == 4])\nmean(mpg$cty[mpg$cyl == 6])\nmean(mpg$cty[mpg$cyl == 8])\n\n# Using aggregate(): dv ~ iv\naggregate(cty ~ cyl, FUN = mean, data = mpg)\n\n# Subset argument\naggregate(cty ~ cyl,\n          FUN = mean,\n          subset = cty &lt; 15,\n          data = mpg)\n```",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#quick-summaries-summary-by",
    "href": "day5.html#quick-summaries-summary-by",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Quick summaries (summary(), by())",
    "text": "Quick summaries (summary(), by())\n\nsummary(df) gives per-column summaries.\nby(df, group, summary) applies summary() within each group.\n\n```{r}\nsummary(mpg)\nsummary(mpg$displ)\n\nby(mpg, mpg$cyl, summary)\n```",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#contingency-tables-proportions-table-xtabs-prop.table",
    "href": "day5.html#contingency-tables-proportions-table-xtabs-prop.table",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Contingency tables & proportions (table(), xtabs(), prop.table())",
    "text": "Contingency tables & proportions (table(), xtabs(), prop.table())\n\nxtabs(~ a + b): formula interface for contingency tables.\nprop.table(tab, margin): convert counts to proportions (by rows 1 or columns 2).\n\n```{r}\n# Counts\ntable(mpg$cyl, mpg$year)\nxtabs(~ mpg$cyl + mpg$year)\n\n# Relative frequencies\nprop.table(table(mpg$year, mpg$class))\nprop.table(table(mpg$year, mpg$class), 1)          # by row\nround(prop.table(table(mpg$year, mpg$class), 2), 2) # by column (rounded)\nround(prop.table(table(mpg$year, mpg$class), 2), 2) * 100\n```",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#mosaic-plot",
    "href": "day5.html#mosaic-plot",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Mosaic plot",
    "text": "Mosaic plot\n```{r}\nmosaicplot(table(mpg$year, mpg$class),\n           color = TRUE,\n           xlab = \"Year\",\n           ylab = \"Class\")\n```\n\n\n\n\n\n\nExercise\n\n\n\nCompute the median highway mileage (hwy) by number of cylinders (cyl) with aggregate(). Compare it to the corresponding boxplots in Section 4.6.",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#pipes",
    "href": "day5.html#pipes",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Pipes",
    "text": "Pipes\n\nCodeResult\n\n\n\n# Without pipe\nhead(arrange(select(mpg, manufacturer, model, hwy), desc(hwy)), 5)\n\n# With pipe (clearer)\nmpg |&gt;\n  select(manufacturer, model, hwy) |&gt;\n  arrange(desc(hwy)) |&gt;\n  head(5)\n\n\n\n\n\n# A tibble: 5 × 3\n  manufacturer model        hwy\n  &lt;chr&gt;        &lt;chr&gt;      &lt;int&gt;\n1 volkswagen   jetta         44\n2 volkswagen   new beetle    44\n3 volkswagen   new beetle    41\n4 toyota       corolla       37\n5 honda        civic         36\n\n\n# A tibble: 5 × 3\n  manufacturer model        hwy\n  &lt;chr&gt;        &lt;chr&gt;      &lt;int&gt;\n1 volkswagen   jetta         44\n2 volkswagen   new beetle    44\n3 volkswagen   new beetle    41\n4 toyota       corolla       37\n5 honda        civic         36",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#select-choose-columns",
    "href": "day5.html#select-choose-columns",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "select() (choose columns)",
    "text": "select() (choose columns)\n\nCodeResult\n\n\n\nmpg |&gt;\n  select(manufacturer, model, hwy)\n\nmpg |&gt;\n  select(starts_with(\"d\")) |&gt;\n  head(3)\n\n# Rename while selecting\nmpg |&gt;\n  select(make = manufacturer, model, hwy) |&gt;\n  head(3)\n\n# Move columns around\nmpg |&gt;\n  relocate(hwy, .before = displ) |&gt;\n  head(3)\n\n\n\n\n\n# A tibble: 234 × 3\n   manufacturer model        hwy\n   &lt;chr&gt;        &lt;chr&gt;      &lt;int&gt;\n 1 audi         a4            29\n 2 audi         a4            29\n 3 audi         a4            31\n 4 audi         a4            30\n 5 audi         a4            26\n 6 audi         a4            26\n 7 audi         a4            27\n 8 audi         a4 quattro    26\n 9 audi         a4 quattro    25\n10 audi         a4 quattro    28\n# ℹ 224 more rows\n\n\n# A tibble: 3 × 2\n  displ drv  \n  &lt;dbl&gt; &lt;chr&gt;\n1   1.8 f    \n2   1.8 f    \n3   2   f    \n\n\n# A tibble: 3 × 3\n  make  model   hwy\n  &lt;chr&gt; &lt;chr&gt; &lt;int&gt;\n1 audi  a4       29\n2 audi  a4       29\n3 audi  a4       31\n\n\n# A tibble: 3 × 11\n  manufacturer model   hwy displ  year   cyl trans      drv     cty fl    class \n  &lt;chr&gt;        &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; \n1 audi         a4       29   1.8  1999     4 auto(l5)   f        18 p     compa…\n2 audi         a4       29   1.8  1999     4 manual(m5) f        21 p     compa…\n3 audi         a4       31   2    2008     4 manual(m6) f        20 p     compa…",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#filter-keep-rows",
    "href": "day5.html#filter-keep-rows",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "filter() (keep rows)",
    "text": "filter() (keep rows)\n\nCodeResult\n\n\n\nmpg |&gt;\n  filter(class == \"suv\", hwy &gt;= 20) |&gt;\n  head(5)\n\nmpg |&gt;\n  filter(manufacturer %in% c(\"toyota\", \"honda\")) |&gt;\n  count(manufacturer)\n\n\n\n\n\n# A tibble: 5 × 11\n  manufacturer model       displ  year   cyl trans drv     cty   hwy fl    class\n  &lt;chr&gt;        &lt;chr&gt;       &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n1 chevrolet    c1500 subu…   5.3  2008     8 auto… r        14    20 r     suv  \n2 chevrolet    c1500 subu…   5.3  2008     8 auto… r        14    20 r     suv  \n3 jeep         grand cher…   3    2008     6 auto… 4        17    22 d     suv  \n4 jeep         grand cher…   4    1999     6 auto… 4        15    20 r     suv  \n5 nissan       pathfinder…   4    2008     6 auto… 4        14    20 p     suv  \n\n\n# A tibble: 2 × 2\n  manufacturer     n\n  &lt;chr&gt;        &lt;int&gt;\n1 honda            9\n2 toyota          34",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#mutate-createmodify-columns",
    "href": "day5.html#mutate-createmodify-columns",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "mutate() (create/modify columns)",
    "text": "mutate() (create/modify columns)\n\nCodeResult\n\n\n\nmpg |&gt;\n  mutate(\n    hwy_kmpl = hwy * 0.425144,           # convert mpg to km/L (approx)\n    efficiency = case_when(\n      hwy &gt;= 30 ~ \"high\",\n      hwy &gt;= 20 ~ \"medium\",\n      TRUE ~ \"low\"\n    )\n  ) |&gt;\n  select(manufacturer, model, hwy, hwy_kmpl, efficiency) |&gt;\n  head(6)\n\n\n\n\n\n# A tibble: 6 × 5\n  manufacturer model   hwy hwy_kmpl efficiency\n  &lt;chr&gt;        &lt;chr&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;     \n1 audi         a4       29     12.3 medium    \n2 audi         a4       29     12.3 medium    \n3 audi         a4       31     13.2 high      \n4 audi         a4       30     12.8 high      \n5 audi         a4       26     11.1 medium    \n6 audi         a4       26     11.1 medium",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#arrange-sort-rows",
    "href": "day5.html#arrange-sort-rows",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "arrange() (sort rows)",
    "text": "arrange() (sort rows)\n\nCodeResult\n\n\n\nmpg |&gt;\n  arrange(manufacturer, desc(hwy)) |&gt;\n  head(6)\n\n\n\n\n\n# A tibble: 6 × 11\n  manufacturer model      displ  year   cyl trans  drv     cty   hwy fl    class\n  &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n1 audi         a4           2    2008     4 manua… f        20    31 p     comp…\n2 audi         a4           2    2008     4 auto(… f        21    30 p     comp…\n3 audi         a4           1.8  1999     4 auto(… f        18    29 p     comp…\n4 audi         a4           1.8  1999     4 manua… f        21    29 p     comp…\n5 audi         a4 quattro   2    2008     4 manua… 4        20    28 p     comp…\n6 audi         a4           3.1  2008     6 auto(… f        18    27 p     comp…",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#group_by-summarise-grouped-summaries",
    "href": "day5.html#group_by-summarise-grouped-summaries",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "group_by() + summarise() (grouped summaries)",
    "text": "group_by() + summarise() (grouped summaries)\n\nCodeResult\n\n\n\nmpg |&gt;\n  group_by(cyl) |&gt;\n  summarise(\n    mean_cty = mean(cty),\n    median_hwy = median(hwy),\n    n = dplyr::n()\n  )\n\nmpg |&gt;\n  group_by(drv) |&gt;\n  summarise(across(c(cty, hwy), list(mean = mean, sd = sd)))\n\n\n\n\n\n# A tibble: 4 × 4\n    cyl mean_cty median_hwy     n\n  &lt;int&gt;    &lt;dbl&gt;      &lt;dbl&gt; &lt;int&gt;\n1     4     21.0         29    81\n2     5     20.5         29     4\n3     6     16.2         24    79\n4     8     12.6         17    70\n\n\n# A tibble: 3 × 5\n  drv   cty_mean cty_sd hwy_mean hwy_sd\n  &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;\n1 4         14.3   2.87     19.2   4.08\n2 f         20.0   3.63     28.2   4.21\n3 r         14.1   2.22     21     3.66",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#distinct-slice-sampling",
    "href": "day5.html#distinct-slice-sampling",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "distinct(), slice(), sampling",
    "text": "distinct(), slice(), sampling\n\nCodeResult\n\n\n\n# Unique combinations of columns\nmpg |&gt;\n  distinct(manufacturer, class) |&gt;\n  head(10)\n\n# Take specific rows by position\nmpg |&gt;\n  slice(1:5)\n\n# Random samples\nset.seed(123)\nmpg |&gt;\n  slice_sample(n = 5)\n\n\n\n\n\n# A tibble: 10 × 2\n   manufacturer class  \n   &lt;chr&gt;        &lt;chr&gt;  \n 1 audi         compact\n 2 audi         midsize\n 3 chevrolet    suv    \n 4 chevrolet    2seater\n 5 chevrolet    midsize\n 6 dodge        minivan\n 7 dodge        pickup \n 8 dodge        suv    \n 9 ford         suv    \n10 ford         pickup \n\n\n# A tibble: 5 × 11\n  manufacturer model displ  year   cyl trans      drv     cty   hwy fl    class \n  &lt;chr&gt;        &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; \n1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p     compa…\n2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p     compa…\n3 audi         a4      2    2008     4 manual(m6) f        20    31 p     compa…\n4 audi         a4      2    2008     4 auto(av)   f        21    30 p     compa…\n5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p     compa…\n\n\n# A tibble: 5 × 11\n  manufacturer model       displ  year   cyl trans drv     cty   hwy fl    class\n  &lt;chr&gt;        &lt;chr&gt;       &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n1 pontiac      grand prix    5.3  2008     8 auto… f        16    25 p     mids…\n2 toyota       toyota tac…   4    2008     6 auto… 4        16    20 r     pick…\n3 toyota       4runner 4wd   4.7  2008     8 auto… 4        14    17 r     suv  \n4 audi         a4 quattro    3.1  2008     6 auto… 4        17    25 p     comp…\n5 toyota       corolla       1.8  1999     4 auto… f        24    33 r     comp…",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#joins-combine-tables-by-keys",
    "href": "day5.html#joins-combine-tables-by-keys",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Joins (combine tables by keys)",
    "text": "Joins (combine tables by keys)\n\nCodeResult\n\n\n\na &lt;- tibble(id = c(1,2,3), val = c(\"A\",\"B\",\"C\"))\nb &lt;- tibble(id = c(2,3,4), note = c(\"two\",\"three\",\"four\"))\n\nleft_join(a, b, by = \"id\")\ninner_join(a, b, by = \"id\")\nfull_join(a, b, by = \"id\")\nanti_join(a, b, by = \"id\")  # rows in a without matches in b\nsemi_join(a, b, by = \"id\")  # rows in a that have a match in b\n\n\n\n\n\n# A tibble: 3 × 3\n     id val   note \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 A     &lt;NA&gt; \n2     2 B     two  \n3     3 C     three\n\n\n# A tibble: 2 × 3\n     id val   note \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     2 B     two  \n2     3 C     three\n\n\n# A tibble: 4 × 3\n     id val   note \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 A     &lt;NA&gt; \n2     2 B     two  \n3     3 C     three\n4     4 &lt;NA&gt;  four \n\n\n# A tibble: 1 × 2\n     id val  \n  &lt;dbl&gt; &lt;chr&gt;\n1     1 A    \n\n\n# A tibble: 2 × 2\n     id val  \n  &lt;dbl&gt; &lt;chr&gt;\n1     2 B    \n2     3 C",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#reshaping-with-tidyr-bonus",
    "href": "day5.html#reshaping-with-tidyr-bonus",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Reshaping with tidyr (bonus)",
    "text": "Reshaping with tidyr (bonus)\n\nCodeResult\n\n\n\n# Wide -&gt; Long\nwide &lt;- tibble(id = 1:3, y_2020 = c(1,2,3), y_2021 = c(4,5,6))\nlong &lt;- wide |&gt;\n  pivot_longer(starts_with(\"y_\"), names_to = \"year\", values_to = \"y\")\nlong\n\n# Long -&gt; Wide\nlong |&gt;\n  pivot_wider(names_from = year, values_from = y)\n\n\n\n\n\n# A tibble: 6 × 3\n     id year       y\n  &lt;int&gt; &lt;chr&gt;  &lt;dbl&gt;\n1     1 y_2020     1\n2     1 y_2021     4\n3     2 y_2020     2\n4     2 y_2021     5\n5     3 y_2020     3\n6     3 y_2021     6\n\n\n# A tibble: 3 × 3\n     id y_2020 y_2021\n  &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1     1      1      4\n2     2      2      5\n3     3      3      6\n\n\n\n\n\n\n\n\n\n\n\nQuick Cheatsheet\n\n\n\n\nColumns: select(), rename(), relocate()\nRows: filter(), arrange(), slice()\nNew columns: mutate(), if_else(), case_when()\nGroups: group_by(), summarise(), across()\nUniques & counts: distinct(), count()\nJoins: left_join(), inner_join(), full_join(), anti_join(), semi_join()\nReshape: pivot_longer(), pivot_wider()",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#first-plot",
    "href": "day5.html#first-plot",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "First plot",
    "text": "First plot\n\nCodeResult\n\n\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompare to base R:\n\nCodeResult\n\n\n\nplot(x = mpg$displ, y = mpg$hwy)",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#aesthetics-colour-size-shape-alpha",
    "href": "day5.html#aesthetics-colour-size-shape-alpha",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Aesthetics: colour, size, shape, alpha",
    "text": "Aesthetics: colour, size, shape, alpha\n\nCodeResult\n\n\n\nggplot(mpg, aes(displ, hwy, colour = manufacturer)) + geom_point()\nggplot(mpg, aes(displ, hwy, colour = manufacturer, size = cyl)) + geom_point()\nggplot(mpg, aes(displ, hwy, shape = factor(year))) + geom_point()\nggplot(mpg, aes(displ, hwy, alpha = cyl)) + geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFixed aesthetics (outside aes()):\n\nCodeResult\n\n\n\nggplot(mpg, aes(displ, hwy)) + geom_point(aes(colour = \"blue\"))\nggplot(mpg, aes(displ, hwy)) + geom_point(colour = \"blue\")",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#faceting",
    "href": "day5.html#faceting",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Faceting",
    "text": "Faceting\n\nCodeResult\n\n\n\nggplot(mpg, aes(displ, hwy)) +\n  geom_point() +\n  facet_wrap(~ class)",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#smoothed-trends",
    "href": "day5.html#smoothed-trends",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Smoothed trends",
    "text": "Smoothed trends\n\nCodeResult\n\n\n\nggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth()\nggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth(method = \"lm\")\nggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth(span = 0.9)  # loess span\n\n\n\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#distributions-histogram-frequency-polygon-density-combo",
    "href": "day5.html#distributions-histogram-frequency-polygon-density-combo",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Distributions: histogram, frequency polygon, density, combo",
    "text": "Distributions: histogram, frequency polygon, density, combo\n\nCodeResult\n\n\n\nggplot(mpg, aes(hwy)) + geom_histogram()\nggplot(mpg, aes(hwy)) + geom_freqpoly()\n\n# Change binwidth\nggplot(mpg, aes(hwy)) + geom_histogram(binwidth = 2)\nggplot(mpg, aes(hwy)) + geom_freqpoly(binwidth = 2)\n\n# Density\nggplot(mpg, aes(hwy)) + geom_density()\n\n# Overlay histogram + density and add a mean line\np &lt;- ggplot(mpg, aes(hwy)) +\n  geom_histogram(aes(y = ..density..), colour = \"black\", fill = \"white\") +\n  geom_density(alpha = .2, fill = \"#FF6666\")\n\np + geom_vline(aes(xintercept = mean(hwy)), linetype = \"dashed\", size = 1)\n\n\n\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#box-violin-and-jitter",
    "href": "day5.html#box-violin-and-jitter",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Box, violin, and jitter",
    "text": "Box, violin, and jitter\n\nCodeResult\n\n\n\nggplot(mpg, aes(drv, hwy)) + geom_boxplot()\nggplot(mpg, aes(drv, hwy)) + geom_jitter()\nggplot(mpg, aes(drv, hwy)) + geom_violin()",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#bars-counts-vs.-pre-summarised-values",
    "href": "day5.html#bars-counts-vs.-pre-summarised-values",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Bars: counts vs. pre-summarised values",
    "text": "Bars: counts vs. pre-summarised values\n\nCodeResult\n\n\n\n# Counts from raw rows\nggplot(mpg, aes(manufacturer)) + geom_bar()\n\n# Pre-summarised data\ndrugs &lt;- data.frame(\n  drug = c(\"a\", \"b\", \"c\"),\n  effect = c(4.2, 9.7, 6.1)\n)\nggplot(drugs, aes(drug, effect)) + geom_bar(stat = \"identity\")",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#lines-paths-time-series",
    "href": "day5.html#lines-paths-time-series",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Lines & paths (time series)",
    "text": "Lines & paths (time series)\n\nCodeResult\n\n\n\nggplot(economics, aes(date, unemploy / pop)) + geom_line()\nggplot(economics, aes(date, uempmed)) + geom_line()\n\nstr(economics)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspc_tbl_ [574 × 6] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ date    : Date[1:574], format: \"1967-07-01\" \"1967-08-01\" ...\n $ pce     : num [1:574] 507 510 516 512 517 ...\n $ pop     : num [1:574] 198712 198911 199113 199311 199498 ...\n $ psavert : num [1:574] 12.6 12.6 11.9 12.9 12.8 11.8 11.7 12.3 11.7 12.3 ...\n $ uempmed : num [1:574] 4.5 4.7 4.6 4.9 4.7 4.8 5.1 4.5 4.1 4.6 ...\n $ unemploy: num [1:574] 2944 2945 2958 3143 3066 ...",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#axes-and-limits",
    "href": "day5.html#axes-and-limits",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Axes and limits",
    "text": "Axes and limits\n\nCodeResult\n\n\n\nggplot(mpg, aes(cty, hwy)) + geom_point(alpha = 1/3)\n\nggplot(mpg, aes(cty, hwy)) +\n  geom_point(alpha = 1/3) +\n  xlab(\"city driving (mpg)\") +\n  ylab(\"highway driving (mpg)\")\n\nggplot(mpg, aes(cty, hwy)) + geom_point(alpha = 1/3) + xlab(NULL) + ylab(NULL)\n\nggplot(mpg, aes(drv, hwy)) + geom_jitter(width = 0.25)\n\nggplot(mpg, aes(drv, hwy)) +\n  geom_jitter(width = 0.25) +\n  xlim(\"f\", \"r\") +\n  ylim(20, 30)\n\nggplot(mpg, aes(drv, hwy)) +\n  geom_jitter(width = 0.25, na.rm = TRUE) +\n  ylim(NA, 30)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning: Removed 139 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#annotations-math-expressions",
    "href": "day5.html#annotations-math-expressions",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Annotations & math expressions",
    "text": "Annotations & math expressions\n\nCodeResult\n\n\n\nggplot(mpg, aes(displ, hwy)) +\n  geom_point(aes(colour = factor(cyl))) +\n  labs(\n    x = \"Engine displacement (litres)\",\n    y = \"Highway miles per gallon\",\n    colour = \"Number of cylinders\",\n    title = \"Mileage by engine size and cylinders\",\n    subtitle = \"Source: http://fueleconomy.gov\"\n  )\n\nvalues &lt;- seq(from = -2, to = 2, by = .01)\ndf &lt;- data.frame(x = values, y = values^3)\nggplot(df, aes(x, y)) +\n  geom_path() +\n  labs(y = quote(f(x) == x^3))",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "day5.html#saving-plots",
    "href": "day5.html#saving-plots",
    "title": "Day 5 - R-eady to be Deployed!",
    "section": "Saving plots",
    "text": "Saving plots\n\n# Save a plot object to disk\np &lt;- ggplot(df, aes(x, y)) +\n  geom_path() +\n  labs(y = quote(f(x) == x^3))\nggsave(\"plot.png\", p, width = 5, height = 5)\n\n# Or specify a full path you control:\n# ggsave(\"path/to/your/folder/plot.png\", p, width = 5, height = 5)",
    "crumbs": [
      "Day 5 - **R**-eady to be Deployed!"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Wrapping Up!",
    "section": "",
    "text": "We accomplished the following:",
    "crumbs": [
      "Wrapping Up!"
    ]
  },
  {
    "objectID": "summary.html#we-accomplished-the-following",
    "href": "summary.html#we-accomplished-the-following",
    "title": "Wrapping Up!",
    "section": "",
    "text": "Why code\nHow to handle data\nBasics of R, RStudio, Quarto and \\(\\LaTeX\\)\nBasics of reproducible and comprehensible coding practices",
    "crumbs": [
      "Wrapping Up!"
    ]
  },
  {
    "objectID": "summary.html#what-we-could-not-cover-or-covered-partially",
    "href": "summary.html#what-we-could-not-cover-or-covered-partially",
    "title": "Wrapping Up!",
    "section": "What we could not cover or covered partially:",
    "text": "What we could not cover or covered partially:\n\nData Wrangling and Analysis with R: Particularly useful would be R for Data Science. The online book is one the the most useful sources to learn all the aspects of coding in R using tidyverse framework.\nZotero integration with RStudio: Follow the link here.\nGithub: This is an excellent tutorial\n\nThere are many other links which are attached to the pages for each day. It would be useful to revisit and explore them as you walk through your semesters.\nOver the next few days, you can access some of the basic qmd templates for writing papers and assignments on the box link here. Make sure to revisit by the time you have to write your first essay.",
    "crumbs": [
      "Wrapping Up!"
    ]
  },
  {
    "objectID": "summary.html#and-as-promised-one-last-thing",
    "href": "summary.html#and-as-promised-one-last-thing",
    "title": "Wrapping Up!",
    "section": "And as promised, one last thing!",
    "text": "And as promised, one last thing!",
    "crumbs": [
      "Wrapping Up!"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "“2016 Time Series Study.” n.d. ANES | American National\nElection Studies. https://electionstudies.org/data-center/2016-time-series-study/.\n\n\nSandve, Geir Kjetil, Anton Nekrutenko, James Taylor, and Eivind Hovig.\n2013. “Ten Simple Rules for Reproducible Computational\nResearch.” PLOS Computational Biology 9 (10): e1003285.\nhttps://doi.org/10.1371/journal.pcbi.1003285.\n\n\nWickham, Hadley. 2010. “A Layered Grammar of Graphics.”\nJournal of Computational and Graphical Statistics 19 (1): 3–28.\nhttps://doi.org/10.1198/jcgs.2009.07098.\n\n\nWilkinson, Leland. 2005. The Grammer of Graphics. Second\nedition. Statistics and Computing. New York, NY: Springer. https://doi.org/10.1007/0-387-28695-0.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "Methods-Brown-Bag.html",
    "href": "Methods-Brown-Bag.html",
    "title": "Methods Brown Bag",
    "section": "",
    "text": "Additional topics.",
    "crumbs": [
      "Methods Brown Bag"
    ]
  },
  {
    "objectID": "file-workflow.html",
    "href": "file-workflow.html",
    "title": "File Management and Workflow",
    "section": "",
    "text": "Why Programming or Coding? (Revisiting)\nCoding is about formalizing your thinking about how you treat the data and automating the formalization task to be done repetitively. It improves efficiency, enhances reproducibility, and boosts creativity when it comes to finding new patterns in your data.\nBenchmarks for reproducible data and statistical analyses:1",
    "crumbs": [
      "Methods Brown Bag",
      "File Management and Workflow"
    ]
  },
  {
    "objectID": "file-workflow.html#why-programming-or-coding-revisiting",
    "href": "file-workflow.html#why-programming-or-coding-revisiting",
    "title": "File Management and Workflow",
    "section": "",
    "text": "Accuracy: Write a code that reduces the chances of making an error and lets you catch one if it occurs.\nEfficiency: If you are doing it twice, see the pattern of your decision-making and formalize it in your code. Difference between Excel and coding\nReplicate-and-Reproduce: Ability to repeat the computational process which reflects your thinking and decisions that you took along the way. Improves transparency and forces one to be deliberate and responsible about choices during analyses.\n\nHuman Interpretability: Writing code is not just about analyzing but allowing yourself and then others to be able to understand your analytic choices.\n\nPublic Good: Research is a public good. And the code allows your research to be truly accessible. This means you write a code that anyone else who understands the language can read, reuse, and recreate without you being present. We essentially ensure that by writing a readable and ideally publicly accessible code.",
    "crumbs": [
      "Methods Brown Bag",
      "File Management and Workflow"
    ]
  },
  {
    "objectID": "file-workflow.html#guidelines",
    "href": "file-workflow.html#guidelines",
    "title": "File Management and Workflow",
    "section": "Guidelines",
    "text": "Guidelines\nThe article “Ten Simple Rules for Reproducible Computational Research” by Sandve et al. (2013) provides guidelines to ensure that computational research is reproducible, transparent, and robust. Here’s a summary of the key points:\n\n\n\n\n\n\n\n\nRule\nDescription\nNotes\n\n\n\n\nDocumentation\nTrack how results are produced, including all steps in the analysis workflow.\nKeep short notes on reults\n\n\nAutomation\nMinimize manual data manipulation by using scripts and documenting any manual changes.\nMake changes to raw data in your scripts\n\n\nVersion Control\nUse version control systems for all custom scripts to track changes and maintain reproducibility.\nUsing Github\n\n\nComprehensive Records\nArchive all versions of external programs used, all intermediate results, and exact observation conditions.\nKeep notes about data in comments\n\n\nAccessibility\nMake raw data, scripts, and results publicly accessible to enhance transparency and replication.\nMaintainig good workflow",
    "crumbs": [
      "Methods Brown Bag",
      "File Management and Workflow"
    ]
  },
  {
    "objectID": "file-workflow.html#file-management-and-workflow",
    "href": "file-workflow.html#file-management-and-workflow",
    "title": "File Management and Workflow",
    "section": "File Management and Workflow",
    "text": "File Management and Workflow\n\nUnderstanding Absolute and Relative Paths\nWhen working with files in any programming environment, paths specify the location of files and folders. These paths can be absolute or relative, and the choice between them significantly impacts reproducibility, portability, and ease of collaboration\nAbsolute Paths An absolute path provides the complete address of a file or folder, starting from the root directory of the file system. It tells the software exactly where to find a file, regardless of where the script is run.\nExample: C:/Users/YourName/Documents/Project/Data/raw_data.dta\nRelative Paths A relative path specifies the location of a file or folder relative to a “base directory” (e.g., the project’s working directory). It does not start from the root directory but instead is calculated based on the location of the script.\nSuppose your working directory is set to: C:/Users/YourName/Documents/Project\nThen, a relative path might look like: Data/raw_data.dta\n\n\n\n\n\n\nPractical Analogy Think of absolute and relative paths like giving directions to a house:\nAbsolute Path: “Go to the main city square, then take the highway north, turn right at the first traffic light, and find the house at 123 Main Street.” Works for people starting anywhere, but requires detailed instructions specific to the city. Relative Path: “From the library, walk two blocks north, then turn left. The house is the second one on the right.” Simpler and context-aware, but assumes everyone starts from the library.\n\n\n\nKey Differences Between Absolute and Relative Paths\n\n\n\n\n\n\n\n\nFeature\nAbsolute Path\nRelative Path\n\n\n\n\nStarting Point\nStarts from the root directory of the file system.\nStarts from the current working directory.\n\n\nPortability\nNot portable—specific to the user’s system.\nHighly portable—adapts to different systems.\n\n\nEase of Sharing\nHarder to share; others must update paths.\nEasier to share; no changes needed if structure is consistent.\n\n\nUse Case\nBest for fixed environments or one-off scripts.\nIdeal for collaborative and reproducible projects.\n\n\nFlexibility\nBreaks if the file is moved or the system changes.\nAdapts as long as the folder structure remains consistent.",
    "crumbs": [
      "Methods Brown Bag",
      "File Management and Workflow"
    ]
  },
  {
    "objectID": "file-workflow.html#r-projects",
    "href": "file-workflow.html#r-projects",
    "title": "File Management and Workflow",
    "section": "R Projects",
    "text": "R Projects\nWe used the setwd() command till now to trace the files we need in our work. As your work expands, projects will have multiple datasets to be loaded, different subsidiary scripts to be used, and multiple outputs to be saved.\nA first order problem related to both file management and reproducibility of code is the usage of file paths. Using absolute paths, like ~/User/MyName/Documents/..... becomes cumbersome and also inhibits efficiency of reproducibility. Every time someone else runs the script, they will have to change the file paths in all the instances in Rscripts or .qmd file to locate the related datasets as well as other objects. Similarly, there would be issues with saving objects in new places. A partially efficient way we used till now involved using setwd() to direct R to a new working directory; this is also called usage of relative paths\nR Projects is a built-in mechanism in RStudio for seamless file management and usage of relative paths.\nLet’s start by creating a new project. Click File &gt; New Project. Name the new project govt-8001-dataessay.\n\n\n\n\n\n\n\n\nFigure 1: To create new project: (top) first click New Directory, then (middle) click New Project, then (bottom) fill in the directory (project) name, choose a good subdirectory for its home and click Create Project. source\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\nDo this process again, this time creating a new project in the the existing directory of math camp files. That is, the folder where you have been saving R scripts and .qmd file associated with math camp 2025. Name it mathcamp2025\nGo to the folder on your system, and click the .RProj file.\nStart a new qmd file like we did before. Delete existing code except for YAML. Run getwd() command in console and see the difference.\nStart a new R code chunk (cmd + option + I) and load vdem dataset. Notice the change in behavior when you press TAB inside the readRDS() function.\n\n\n\n\n\nStandardized Folder and File Structure (here package)\nAn efficient file and folder management system is going to be crucial as we move into working with serious projects. Storing using all the files associated with a project in a comprehensible folder system is facilitated in both R and Stata. You would ideally want to create your own template for folder management that you follow across projects.\nAn efficient file and folder management system is going to be crucial as we move into working with serious projects. As stressed earlier, keeping and using all the files associated with a project in a comprehensible folder system is facilitated by R Projects. You would ideally want to create your own template for folder management that you follow across proejcts. For starters, the folder structure below is the one created for your data essay assignment in Govt 8001 or Quant 1.\nYou can use the point-and-click fucntionality in your computers to create this structure. Later today, we will briefly go through an R script that do this programmatically.\n📦 govt-8001-dataessay\n├─ govt-8001-dataessay.RProj\n├─ 000-setup.R\n├─ 001-eda.qmd\n├─ 002-analysis.qmd\n└─ 003-manuscript.qmd\n├─ Data\n│  ├─ Raw\n│  │  ├─ Dataset1\n│  │  │  ├─ dataset1.csv\n│  │  │  └─ codebook-dataset1.pdf\n│  │  └─ Dataset2\n│  │     ├─ ...dta\n│  │     └─ codebook-dataset2.pdf\n│  └─ Clean\n│     └─ Merged-df1-df2.csv\n├─ Scripts\n│  ├─ R-scripts\n│  │  ├─ plotting-some-variable.R\n│  │  └─ exploring-different-models.R\n│  ├─ Stata-Scripts\n│  │  └─ seeing-variable-labels.do\n│  └─ Python-Scripts\n│     └─ scraping-data-from-website.py\n└─ Outputs\n   ├─ Plots\n   │  ├─ ...jpeg\n   │  └─ ...png\n   ├─ Tables\n   │  └─ .csv\n   └─ Text\n      └─ ...txt\nSuggested folder structure for a Quant-1 project\nWhile we learnt how to create or associate an .RProj with a folder, integrating it with here() function from the here package, makes workflow smoother. Let’s do it with the following exercise.\n\n\n\n\n\n\nExercise\n\nGo the RStudio window with mathcamp2024 project. Check the extreme upper right corner to see if you are in the right window.\nIn the qmd file we were working in, add an R chunk.\nLoad the library here with the following code. Run the code line by line\n\n\nlibrary(here)\n\n\n # See the output for each of the following lines\nhere()\n\nhere(\"Datasets-mathcamp\",\"V-Dem-CY-Full+Others-v12.rds\")\n\n# syntax is\n\n# here(\"First subfolder from the root folder\", \"second subfolder\",...., \"file\")\n\n\nvdem_new &lt;- readRDS(here(\"Datasets-mathcamp\",\"V-Dem-CY-Full+Others-v12.rds\"))\n\nThis is a cleaner syntax which when coupled with usage of R projects saves time in typing file paths and avoids issues when the project is run on some other computer system.\nNote: here() always notes the path from the main folder or the root directory where your .RProj file is located.\nSave the files and close the mathcamp2025 project window\n\n\n\nMake it a habit of using R Projects and here() function in your scripts for writing portable code.\nYou can read this quick and informative blogpost on using these two here.\n\n\n\n\n\n\nExercise\n\nDownload the 000-setup.R from here\nPlace it in the govt-8001-dataessay folder.\nOpen it in the opened RStudio window.\n\n```{r}\n# Name: 000-setup.R\n# Author: Parushya\n# Purpose: Creates main folders, subfolders in the main project directory\n# Will also ensure that you have basic packages required to run the repository\n# Date Created: 2020/10/07\n\n\n\n# Checking if packages are installed and installing\n\n\n# check.packages function: install and load multiple R packages.\n# Found this function here: https://gist.github.com/smithdanielle/9913897 on 2019/06/17\n# Check to see if packages are installed. Install them if they are not, then load them into the R session.\n\ncheck.packages &lt;- function(pkg) {\n  new.pkg &lt;- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n  if (length(new.pkg)) {\n    install.packages(new.pkg, dependencies = TRUE)\n  }\n  sapply(pkg, require, character.only = TRUE)\n}\n\n# Check if packages are installed and loaded:\npackages &lt;- c(\"janitor\",  \"tidyverse\", \"utils\", \"here\")\ncheck.packages(packages)\n\n\n# Setting Directories and creating subfolders\n\n\n# Creating Sub Folders\n\n## Data\ndir.create(file.path(paste0(here(\"Data\")))) # Data Folder\ndir.create(file.path(paste0(here(\"Data\",\"Raw\")))) # Raw Data sub-folder\ndir.create(file.path(paste0(here(\"Data\",\"Clean\")))) # Clean Data sub-folder\n\n\n# Scripts\ndir.create(file.path(paste0(here(\"Scripts\")))) # Scripts Folder\ndir.create(file.path(paste0(here(\"Scripts\",\"RScripts\")))) # RScripts  sub-folder\ndir.create(file.path(paste0(here(\"Scripts\",\"Stata-Scripts\")))) # Stata Scripts sub-folder\ndir.create(file.path(paste0(here(\"Scripts\",\"Python-Scripts\")))) # Python Scripts sub-folder\n\n\n# Output\ndir.create(file.path(paste0(here(\"Outputs\")))) # Outputs Folder\ndir.create(file.path(paste0(here(\"Outputs\",\"figures\")))) # Figures sub-folder\ndir.create(file.path(paste0(here(\"Outputs\",\"tables\")))) # Tables sub-folder\ndir.create(file.path(paste0(here(\"Outputs\",\"text\")))) # Text sub-folder\n\n```\n\nRun the file line-by-line. See the folder structure created in your main folder.",
    "crumbs": [
      "Methods Brown Bag",
      "File Management and Workflow"
    ]
  },
  {
    "objectID": "file-workflow.html#takeaways",
    "href": "file-workflow.html#takeaways",
    "title": "File Management and Workflow",
    "section": "Takeaways",
    "text": "Takeaways\nHere’s a quick workflow for starting a new project or assignment or paper.\n\nMake a new folder in your computer with apt name. Ideally, govt-&lt;coursecode&gt;-&lt;project&gt;.\nStart RStudio.\nCreate a new Rstudio Project by clicking File &gt; New Project. Name it govt-&lt;coursecode&gt;-&lt;project.\nCheck if now your RStudio Window shows the project name on top right corner. If not, go to folder and double-click the .RProj file.\nPaste the 000-setup.R file in the main project folder. Open it in the same Rstudio window with the project and run the complete file. Your folder structure is created.\nCopy your raw data in Data/Raw folder. Similarly, your scripts in Scripts/RScripts folder\nStart your new .qmd file and save it in the main folder.\nRemember to use here() package extensively in both, scripts and quarto files, when loading or saving the data.\nYou can zip the whole project folder for sharing. The receiver will just need to unzip and run the code after starting the associated .RProj file, without changing file paths on their computer.\n\n\n\n\n\nSandve, Geir Kjetil, Anton Nekrutenko, James Taylor, and Eivind Hovig. 2013. “Ten Simple Rules for Reproducible Computational Research.” PLOS Computational Biology 9 (10): e1003285. https://doi.org/10.1371/journal.pcbi.1003285.",
    "crumbs": [
      "Methods Brown Bag",
      "File Management and Workflow"
    ]
  },
  {
    "objectID": "file-workflow.html#footnotes",
    "href": "file-workflow.html#footnotes",
    "title": "File Management and Workflow",
    "section": "",
    "text": "Inspired by the summary provided by Prof Aaron Williams’ course on Data Analysis offered at McCourt School. Strongly recommended to learn good coding using R↩︎",
    "crumbs": [
      "Methods Brown Bag",
      "File Management and Workflow"
    ]
  },
  {
    "objectID": "vc-git-hub.html",
    "href": "vc-git-hub.html",
    "title": "Version Control with Git and Github",
    "section": "",
    "text": "What is Version Control?\nVersion Control System (VCS) is keeps records of changes made to files/files over time. Using a VCS enables us to revisit and/or restore older version of files, in case we made a mistake or even if we need to revisit our thinking as a process progressed. Think Google Docs.",
    "crumbs": [
      "Methods Brown Bag",
      "Version Control with Git and Github"
    ]
  },
  {
    "objectID": "vc-git-hub.html#understanding-git",
    "href": "vc-git-hub.html#understanding-git",
    "title": "Version Control with Git and Github",
    "section": "Understanding Git",
    "text": "Understanding Git\nGit is a widely used VCS. A git project stores changes in a local repository. That is, snapshots with metadata and how the folder system with its files looked like at a particular moment of time looked like is saved locally on your computer.\n\n\n\n\n\nGit thinks of files as snapshots in time. In a git system, different versions of the folder with all the files are stored as snapshot with timestamps attached to them. source\n\n\n\n\nGit is a local system (mostly). No connection to a server or internet is needed to access older snapshots. Not just the older version of files, but details of the changes are recorded locally and can be accessed with locally available git commands.\n\nThe Three States\nThe key to understanding a git project is to develop clarity about the three states it holds the file in.\n1- Modified: Any changes you make and save. Think, saving a word doc.\n2- Staged: Any saved changes are offered or assembled on a table to git.\n3- Committed: The staged table is deposited or committed to local git repository.\n\n\n\n\n\nModification happens in Working Directory (Your Local Folder). Staging happens in Staging Area. Committing saves a snapshot of the staged changes to the local Git repository (stored in the .git directory inside your folder) source\n\n\n\n\n\n\n\n\n\n\nFrom Git-book\n\n\n\nThe working tree is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify. This is the case when you pull file/s from online reporsitory\nThe staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit. Its technical name in Git parlance is the “index”, but the phrase “staging area” works just as well.\nThe Git directory is where Git stores the metadata and object database for your project. This is the most important part of Git, and it is what is copied when you clone a repository from another computer.\nThe basic Git workflow goes something like this:\n1- You modify files in your working tree.\n2- You selectively stage just those changes you want to be part of your next commit, which adds only those changes to the staging area.\n3- You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.\n\n\n\n\nUsing Git\nWe use command-line program called Bash to run git on computer. This essentially means using Terminal on macOS and Git Bash on Windows.\n\n\n\n\n\n\nSetup\n\n\n\nMacOS: For mac, open terminal and type git. If a list of commands shows up, you have git installed. Else, download and install using the link here.\nWindows: Install using the link here. Check all default installations. If installed correctly, upon right-clicking in any folder you should see open terminal here.\nDetailed instructions on installation here\n\n\nWe need some basic bash commands to get started:\n\npwd: prints working directory.\n\nls: lists all the files in the working directory.\n\ncd: changes directory.\n\nmkdir: Makes a new directory.\n\nTry these commands in Terminal/Bash on your systems.\nGit commands\nCommands for git(or any program) start with name of the program. Try the following commands:\ngit status\ngit log\nYou can also using terminal/bash from RStudio. Look at the second button at the bottom left, next to console. It automatically shows bash in the working directory of your project.\n\n\nLocal Git Workflow\nGit workflow is anchored around repository. A repository is a folder where files including data, scripts, and other files are stored along with git log.\nIn our workflow, this should ideally be the folder where .RProj file is located.\n\n\n\n\n\n\nPractice\n\n\n\nLet’s practice using an existing folder with scripts and data.\n1- Open an existing R project. If not available, start a new R Project using File&gt;New Project.\n2- In the terminal window of Rstudio, type pwd to see of the correct working directory is opened.\n3- Type git init. This initializes the git repository for the project. This step needs to be done only once per folder.\n4- Tell git which files are to be tracked and then staged. Use git add followed by filename or tab to add a few files one by one.\n3- Once added type git commit -m \"first commit\". This takes a snapshot of staged file/s. ** Do not forget the -m**.\n4- Use git status and git log to see outputs about the process.\n\nRepeat this process after modifications to any script.\n\n\n\nAs a norm, avoid hosting raw data files like .csv, .dta, or .xlsx on GitHub. Large or sensitive files should be listed in a .gitignore file to prevent accidental upload. Git is best suited for tracking code and small plain-text files.See more on .gitignore here.\nSimilar to comments in R codes, commit messages should also ideally be brief phrases explaining contextual change rather than being detailed messages.\n\n\n\n\n\nsource",
    "crumbs": [
      "Methods Brown Bag",
      "Version Control with Git and Github"
    ]
  },
  {
    "objectID": "vc-git-hub.html#using-github",
    "href": "vc-git-hub.html#using-github",
    "title": "Version Control with Git and Github",
    "section": "Using Github",
    "text": "Using Github\nGithub is an online hosting service for git based VCS. Git and Github are often confused with one another. It is important to remeber how they are different and that they complement each other.\nThe most common workflow involves creating and modifying files locally,intializing local git repo (git init), staging files (git add) and committing changes with an informative message (git commit -m\"&lt;message&gt;\") to local git repository, and then push changes to Github.\n\n\n\n\n\n\nGithub Practice\n\n\n\n\nMake you account on Github if not already done. Ideally, use personal email id to register.\nMake a new RProject on your computer as we had done previously. Name it my-git-practice.\nDownload and place the 000-setup.R in the folder.\nRun the R Project file, if not already done. In the opened Rstudio window, go to terminal at the bottom and check with pwd. Then run git init.\nOn Github.com homescreen, click the green New button on top left corner.\nCall the new repository my-git-practice (same as local repository). Don’t make ay other changes on this page. Click Create repository.\nCopy the code under …or push an existing repository from the command line. Note: If you’re using an older version of Git or RStudio, your default branch may be master instead of main. You can rename it later or use git branch -M main.\nPaste it in the terminal window of Rstudio and press Enter.\n\nfF any issues pop up here, resolve by talking amongst yourself or google.\n\nRefresh the github.com window.\nRun git add 000-setup.R in terminal. (Staging state)\nRun git commit -m \"setup file added\" in terminal. (Committing state)\nRun git push in terminal. This pushes the local changes from repository to remote (online) repository.\n\n\n\nWhile git is used for version control, Github is additionally used for collaborative work. We are not covering branching and collaboration today. Links below can help you with starting these at later stages.\nIn addition to git functions, Github adds similar but additional stages. Compare the following flowchart to one in section on understanding git.\n\n\n\n\n\nThe backward arrow represent steps where repositiories are pulled from remote to local directory. This is used mostly when multiple peeople work on different systems on same repository or if your work involves working on different systems. The process is intuitive: Changes are pushed from one sytem to remote and then continued by first fetching or pulling the repository from the remote to local by next user or system. Image source",
    "crumbs": [
      "Methods Brown Bag",
      "Version Control with Git and Github"
    ]
  },
  {
    "objectID": "vc-git-hub.html#additonal-resource",
    "href": "vc-git-hub.html#additonal-resource",
    "title": "Version Control with Git and Github",
    "section": "Additonal Resource",
    "text": "Additonal Resource\n\nGit Documentation\nAdvanced Git operations tutorial\nGit Cheatsheet\nVideo explainers of git workflow (here, here, and here)\nGit Branching",
    "crumbs": [
      "Methods Brown Bag",
      "Version Control with Git and Github"
    ]
  },
  {
    "objectID": "github-web.html",
    "href": "github-web.html",
    "title": "Publishing Website with Quarto and Github",
    "section": "",
    "text": "Why Quarto websites?\nStatic websites: simple, fast, free.\nQuarto advantage: integrates text, code, and publishing.\nGitHub Pages: free hosting for version-controlled sites.",
    "crumbs": [
      "Methods Brown Bag",
      "Publishing Website with Quarto and Github"
    ]
  },
  {
    "objectID": "github-web.html#local-quarto-website",
    "href": "github-web.html#local-quarto-website",
    "title": "Publishing Website with Quarto and Github",
    "section": "Local Quarto Website",
    "text": "Local Quarto Website\nWe will first get two types of minimal websites running locally (i.e. stored on your computer). We will use R, Quarto, Git, and Github - tools which we have mastered in last one month.\n\n\n\n\n\n\nStarting Website Project\n\n\n\n\nFile &gt; New Project… &gt; New Directory &gt; Quarto Website\nName it mysite.\nClick Create Project.\n\n\n\nRStudio opens your new project. You should see files like:\n\n\n\n\n\n\n\n\n\n\n_quarto.yml (site configuration): This is the default configuration file with the site metadata including options about looks and navigation.\nindex.qmd (homepage): Landing Page. Never rename this file\nabout.qmd (About page)\nstyles.css (optional, template dependent)\nmysite.Rproj (the R Project file)\n\nMore detailed description of various elements is here\n\n\n\n\n\n\nBasic Modifications\n\n\n\n\nIn _quarto.yaml, change the title to your name. What each section means (quick explainer)\n\nproject.type: must be website for multi-page sites.\nwebsite.title: site title in the navbar and browser tab.\nwebsite.navbar.left: list of pages shown as left-side nav links.\n(Use either href: about.qmd or { text: “About”, href: about.qmd }.)\nformat.html: page rendering options (theme, TOC, numbering, etc.)\n\nIn _quarto.yaml, add output-dir: docs under type: website. This is needed for hosting on Github which we will do in later steps.\n\nproject:\n  type: website\n  output-dir: docs\n\nCreate a file named .nojekyll in your repository’s root directory (i,e mysite/), which is required to disable some processing of HTML files that GitHub does by default. From RStudio’s Files pane, click New Blank File &gt; Text File, then type .nojekyll &gt; click OK (you can use the Text File option to create any file type)\nOpen index.qmd. Delete the existing content. Paste the following code and make suitable modifications. Then save.\n\n\n---\ntitle: \"&lt;Your Name&gt;\"\n---\n\nI am a Ph.D. student in Government at [Georgetown University](https://government.georgetown.edu/), specializing in Comparative Politics and Political Methodology. My dissertation examines how property rights—conceptualized as symbolic, consumptive, and productive rights—shape individuals’ political strategies and political behavior, with a regional focus on India. Methodologically, I combine formal theory, fieldwork, and advanced quantitative approaches, including causal inference, spatial analysis, and Bayesian hierarchical modeling.\n\nIn addition to my research, I am deeply committed to teaching and mentoring. I have extensive experience as a teaching assistant for graduate-level courses in quantitative methods and co-lead initiatives such as Math Camp and the Methods Brown Bag series, which broaden methodological training in the department. I also design reproducible, digital-first research and teaching materials using Quarto, GitHub, and open-source workflows, reflecting my commitment to accessible, transparent scholarship.\n\nOutside of academia, I enjoy exploring cooking science and photography.  \n\n\nClick Render on top. You should be able to see minimal functional version of your first website.\n\n\n\nNow you have a basic version of your website. Let’s start building more.\nReplace the YAML in index.qmd with the following:\n\n\n\n\n\n\n\n---\ntitle: \"&lt;Your Name&gt;\"\nimage: pp.png # Put your in the root folder and change the file name here\ntoc: false\nabout: \n  template: jolla # Change this to text on your card\n  image-shape: round\n  image-width: 17em\n  links:\n    - text: LinkedIn\n      href: https://www.linkedin.com/in/parushya/ # Change\n    - text: GitHub\n      href: https://github.com/parushya # Change\n    - text: Email\n      href: pp714@georgetown.edu # Change\n---\n\n\n\n\nMake modifications. Various paramters are explained below:\ntemplate: choose from Quarto’s built-in template options. See a full list here\nimage: supply it the file path to your photo with the correct file extension (png/jpeg/webp)\nimage-width & image-shape: adjust your image’s size and shape (round, rounded, rectangle)\nlinks: add buttons with links to your social media pages\nPress Render\n\nModifying/Adding Pages\nAs a default, Quarto website project, creates two html pages corresponding to index.qmd and about.qmd. You can modify the existing pages by changing the content/code in them, as explained above. You can change the name of the page as it appears in the top title bar by changing the following in the _quarto.yaml. Or create a new page (for eg, research.qmd, and save it in root folder), and add it as shown below.\n\n\n\n\n\n\n\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"&lt;your name&gt;\"\n  navbar:\n   left:\n     - href: index.qmd\n       text: Home\n     - about.qmd # Delete if you do not want to render it in final page\n     - href: research.qmd # Name of the new qmd file after you have created and saved it in the root folder\n       text: Research\n       \n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n\n\n\n\nAlways, run quarto render in terminal, to build the complete website, after each step",
    "crumbs": [
      "Methods Brown Bag",
      "Publishing Website with Quarto and Github"
    ]
  },
  {
    "objectID": "github-web.html#hosting-on-github",
    "href": "github-web.html#hosting-on-github",
    "title": "Publishing Website with Quarto and Github",
    "section": "Hosting on Github",
    "text": "Hosting on Github\nWe already know how to use Github. The website we created can be easily hosted using same steps with some additions.\n\n\n\n\n\n\n\nMake a new repository on Github.com after logging in. Name it mysite (same as your local project).\nCopy the code under …or create a new repository on the command line. Paste it in terminal at the bottom of Rstudio, and run. This should intialize your local git repo and link it to newly created online repo.\nUse git add docs, git commit -m \"First website\", and git push sequentially to put the rendered html files in docs folder to the online repo.\nOn Github.com, refresh the mysite repository page. You should be able to see docs folder and a readme file uploaded.\nGo to Settings &gt; Pages.\nUnder Build and Deployment set branch to main and folder to docs. Save. Wait a couple of minutes.\n\n\n\n\n\n\n\n\n\n\n\nYou website should be available publicly. Its url would be &lt;your-github-username&gt;.github.io/mysite.",
    "crumbs": [
      "Methods Brown Bag",
      "Publishing Website with Quarto and Github"
    ]
  },
  {
    "objectID": "github-web.html#review-of-workflow",
    "href": "github-web.html#review-of-workflow",
    "title": "Publishing Website with Quarto and Github",
    "section": "Review of Workflow",
    "text": "Review of Workflow\n\nStart quarto website R Project\nChange output-dir to docs in _quarto.yaml.\nMake modifications to individual qmd files, and then in yaml. Do not forget to render by using quarto render in terminal\nMake online repo with same project name. Sync by pasting code from instructions on the online repo page into the terminal.\nUse git add, commit -m, and push commands to push docs folder to online Github repo.\nGo to Settings&gt;Pages, and change deployment folder to docs. Hit Save.\nWebsite is ready in a couple of minutes.",
    "crumbs": [
      "Methods Brown Bag",
      "Publishing Website with Quarto and Github"
    ]
  },
  {
    "objectID": "github-web.html#additional-resource",
    "href": "github-web.html#additional-resource",
    "title": "Publishing Website with Quarto and Github",
    "section": "Additional Resource",
    "text": "Additional Resource\n\nQuarto Official Documentation for websites.\nQuarto Documentation for Books (in html, pdf, and word format). This website is built using the book functionality. It would be particularly useful when it comes to teaching or writing a dissertation manuscript.\nSam Shanny-Csik’s tutorial on creating and modifying quarto websites.\nGallery of websites, prsentations, books, dashboards and interactive docs built with quarto. Use this for inspiration.",
    "crumbs": [
      "Methods Brown Bag",
      "Publishing Website with Quarto and Github"
    ]
  }
]